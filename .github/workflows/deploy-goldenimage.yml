# This is a workflow to deploy the golden image with Actions
name: Golden Image VM

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:       
        description: 'Enter an environment (e.g. uat,stage or prod)'
        required: true
      vmname:
        description: 'Name of the vm, should match 1-1 with tfvars filename (e.g. tcw-prod-web-01)'
        required: true
      destroy:
        description: 'Destroy Virtual Machine'
        required: true
        default: 'false' 

env:
  TF_VAR_VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  TF_VAR_VAULT_TOKEN : ${{ secrets.VAULT_TOKEN }} 

# The workflow run will run the job specific to the deployment environment 
jobs:
  terraform-uat:
    name: 'Deploy VM to Environment'
    runs-on: ubuntu-latest
      
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}   
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }} 
      CONN_STR: ${{ secrets.CONN_STR_WEBTFSTATESA }}
      
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/deployments/goldenimage/modules/web
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
           
    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init   
      run: terraform init -backend-config="key=${{ github.event.inputs.vmname }}.tfstate" -var-file="../../environments/${{ github.event.inputs.environment }}/${{ github.event.inputs.vmname }}.tfvars"
      
    # Run a terraform plan 
    - name: Terraform Plan
      id: plan   
      run: terraform plan -var-file="../../environments/${{ github.event.inputs.environment }}/${{ github.event.inputs.vmname }}.tfvars" -no-color 
      
    #  apply or destroy infrastructure according to Terraform configuration files
    - name: Terraform Apply or Destroy
      run: |
        if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
          terraform destroy -auto-approve -var-file="../../environments/${{ github.event.inputs.environment }}/${{ github.event.inputs.vmname }}.tfvars"
        # TODO : Handle destroying the tfstate for the VM
          az storage blob delete --name ${{ github.event.inputs.vmname }}.tfstate --container-name tfstate-uat --account-name webtfstatesa --account-key ${{ secrets.ARM_ACCESS_KEY }} --connection-string $CONN_STR
        else
          terraform apply -auto-approve -var-file="../../environments/${{ github.event.inputs.environment }}/${{ github.event.inputs.vmname }}.tfvars"
        fi
