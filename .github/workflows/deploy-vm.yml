# This is a workflow to deploy the golden image with Actions
name: Golden Image VM

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:       
        description: 'Enter an environment (uat,stage or prod)'
        required: true
        default: 'uat'
      vm-name:       
        description: 'Enter the VM name'
        required: true
        #default: 'test4'
      tfvars:
        description: 'TFVars Filename'
        required: true
        #default: 'default.tfvars'  
      destroy:
        description: 'Destroy infrastructure'
        required: true
        default: 'false'     
env:
  #TF_VAR_VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  #TF_VAR_VAULT_TOKEN : ${{ secrets.VAULT_TOKEN }}
  #ENVIRONMENT: "${{ github.event.inputs.environment }}"
  
# The workflow run will run the job specific to the deployment environment 
jobs:
  terraform-uat:
    name: 'Terraform uat environment'
    runs-on: ubuntu-latest
    
    if: ${{ github.event.inputs.environment == 'uat' }}      
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}   
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }} 
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/deployments/goldenimage/uat
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
           
    - name: Configure Terraform variables
      id: tfvars
      run: |
        echo "::set-output name=filename::${{ github.event.inputs.tfvars }}"

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init   
      run: terraform init -backend-config="key=${{ github.event.inputs.vm-name }}terraform.tfstate" -var-file=${{ steps.tfvars.outputs.filename }} -var "vmname=${{ github.event.inputs.vm-name }}" 
      
    # Run a terraform plan 
    - name: Terraform Plan
      id: plan   
      run: terraform plan -var-file=${{ steps.tfvars.outputs.filename }} -var "vmname=${{ github.event.inputs.vm-name }} -no-color 
      
    #  apply or destroy infrastructure according to Terraform configuration files
    - name: Terraform Apply or Destroy
      run: |
        if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
          terraform destroy -auto-approve -var-file=${{ steps.tfvars.outputs.filename }} -var "vmname=${{ github.event.inputs.vm-name }}
        else
          terraform apply -auto-approve -var-file=${{ steps.tfvars.outputs.filename }} -var "vmname=${{ github.event.inputs.vm-name }}
        fi

  terraform-stage:
    name: 'Terraform stage environment'
    runs-on: ubuntu-latest
    
    if: ${{ github.event.inputs.environment == 'stage' }}      
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID_STAGE }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET_STAGE }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID_STAGE }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID_STAGE }}   
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY_STAGE }} 
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/deployments/goldenimage/stage
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
           
    - name: Configure Terraform variables
      id: tfvars
      run: |
        echo "::set-output name=filename::${{ github.event.inputs.tfvars }}"

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init   
      run: terraform init
      
    # Run a terraform plan 
    - name: Terraform Plan
      id: plan   
      run: terraform plan -var-file=${{ steps.tfvars.outputs.filename }} -no-color
      
    #  apply or destroy infrastructure according to Terraform configuration files
    - name: Terraform Apply or Destroy
      run: |
        if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
          terraform destroy -auto-approve -var-file=${{ steps.tfvars.outputs.filename }}
        else
          terraform apply -auto-approve -var-file=${{ steps.tfvars.outputs.filename }}
        fi
  terraform-prod:
    name: 'Terraform prod environment'
    runs-on: ubuntu-latest
    
    if: ${{ github.event.inputs.environment == 'prod' }}      
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID_PROD }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET_PROD }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID_PROD }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID_PROD }}   
      ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY_PROD }} 
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/deployments/goldenimage/prod
        
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
           
    - name: Configure Terraform variables
      id: tfvars
      run: |
        echo "::set-output name=filename::${{ github.event.inputs.tfvars }}"

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init   
      run: terraform init
      
    # Run a terraform plan 
    - name: Terraform Plan
      id: plan   
      run: terraform plan -var-file=${{ steps.tfvars.outputs.filename }} -no-color
      
    #  apply or destroy infrastructure according to Terraform configuration files
    - name: Terraform Apply or Destroy
      run: |
        if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
          terraform destroy -auto-approve -var-file=${{ steps.tfvars.outputs.filename }}
        else
          terraform apply -auto-approve -var-file=${{ steps.tfvars.outputs.filename }}
        fi
