# This is a workflow to deploy the golden image with Actions
name: Golden Image VM

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:       
        description: 'Enter an environment (uat,stage or prod)'
        required: true
        default: 'uat'
      tfvars:
        description: 'TFVars Filename'
        required: true
        #default: 'default.tfvars'  
      destroy:
        description: 'Destroy infrastructure'
        required: true
        default: 'false'        

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}     
  #TF_VAR_VAULT_ADDR: ${{ secrets.VAULT_ADDR }}
  #TF_VAR_VAULT_TOKEN : ${{ secrets.VAULT_TOKEN }}
  ARM_ACCESS_KEY: ${{ secrets.ARM_ACCESS_KEY }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/deployments/goldenimage/${{ github.event.inputs.environment }}

    steps:
#     - name: Validate Input and set working directory
#       run: |
#         choice="${{ github.event.inputs.environment }}"
#         if [[ "$choice" != "uat" && "$choice" != "stage" && "$choice" != "prod" ]]; then
#           echo "Invalid choice. Please select one of: uat, stage, prod"
#           exit 1
#         else
#           working-directory: ./terraform/deployments/goldenimage/$choice
#         fi
#         #echo "Selected Option: $choice"

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Configure Terraform variables
      id: tfvars
      run: |
        echo "::set-output name=filename::${{ github.event.inputs.tfvars }}"

    # Install the preferred version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.4.6

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init
      
    # Run a terraform plan 
    - name: Terraform Plan
      id: plan   
      run: terraform plan -var-file=${{ steps.tfvars.outputs.filename }} -no-color
      
      # apply or destroy infrastructure according to Terraform configuration files
#     - name: Terraform Apply or Destroy
#       run: |
#         if [ "${{ github.event.inputs.destroy }}" == "true" ]; then
#           terraform destroy -auto-approve -var-file=${{ steps.tfvars.outputs.filename }}
#         else
#           terraform apply -auto-approve -var-file=${{ steps.tfvars.outputs.filename }}
#         fi
